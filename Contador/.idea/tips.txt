# Descrição
Neste desafio de projeto, vamos explorar alguns cenários com fluxos condicionais, repetições e excepcionais. Ao final, você poderá exercitar todo o conteúdo ministrado nas aulas implementando um pequeno sistema contador.

Agora é a sua vez de ser o protagonista! Implemente o desafio sugerido pela expert criando um repositório próprio e, com isso, aumentando ainda mais seu portfólio de projetos no GitHub!

# Pré-requisitos:

Lógica de programação e POO;

Conhecimentos básicos(Java);

Computador com SO de sua preferência(Windows, Linux, Mac OS);

IDE (Visual Studio Code, Eclipse, etc);

# Slides e GitHub
A apresentação completa utilizada durante o curso está disponível AQUI
https://docs.google.com/presentation/d/1kt8Qcrkcv0S0aph4vNcDHeo8G2ek6uyQ/edit?usp=sharing&ouid=105300330738120646134&rtpof=true&sd=true

Com isso, você terá acesso ao projeto do Github e links explorados durante as aulas.
https://github.com/digitalinnovationone/trilha-java-basico/tree/main/desafios/controle-fluxo


DIO - Trilha Java Básico
www.dio.me
https://felipe-aguiar.gitbook.io/dio-java
https://felipe-aguiar.gitbook.io/dio-java/exercicios/banco-terminal
https://felipe-aguiar.gitbook.io/dio-java/gitbook
https://felipe-aguiar.gitbook.io/dio-java/gitbook/summary

Autores
Gleyson Sampaio
Controle de Fluxo - Desafio
Vamos exercitar todo o conteúdo apresentado no módulo de Controle de Fluxo codificando o seguinte cenário.

O sistema deverá receber dois parâmetros via terminal que representarão dois números inteiros, com estes dois números você deverá obter a quantidade de interações (for) e realizar a impressão no console (System.out.print) dos números incrementados, exemplo:

Se você passar os números 12 e 30, logo teremos uma interação (for) com 18 ocorrências para imprimir os números, exemplo: "Imprimindo o número 1", "Imprimindo o número 2" e assim por diante.
Se o primeiro parâmetro for MAIOR que o segundo parâmetro, você deverá lançar a exceção customizada chamada de ParametrosInvalidosException com a segunda mensagem: "O segundo parâmetro deve ser maior que o primeiro"
Crie o projeto DesafioControleFluxo
Dentro do projeto, crie a classe Contador.java para realizar toda a codificação do nosso programa.
Dentro do projeto, crie a classe ParametrosInvalidosException que representará a exceção de negócio no sistema.
Abaixo temos um trecho de código no qual você poderá seguir alterando as partes que contenham ??

public class Contador {
	public static void main(String[] args) {
		Scanner terminal = new Scanner(System.in);
		System.out.println("Digite o primeiro parâmetro");
		int parametroUm = terminal.??;
		System.out.println("Digite o segundo parâmetro");
		int parametroDois = terminal.??;
		
		try {
			//chamando o método contendo a lógica de contagem
			contar(parametroUm, parametroDois);
		
		}catch (? exception) {
			//imprimir a mensagem: O segundo parâmetro deve ser maior que o primeiro
		}
		
	}
	static void contar(int parametroUm, int parametroDois ) throws ParametrosInvalidosException {
		//validar se parametroUm é MAIOR que parametroDois e lançar a exceção
		
		int contagem = parametroDois - parametroUm;
		//realizar o for para imprimir os números com base na variável contagem
	}
}
